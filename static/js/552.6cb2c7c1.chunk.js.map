{"version":3,"file":"static/js/552.6cb2c7c1.chunk.js","mappings":"iOASaA,GAAcC,EAAAA,EAAAA,IAAiB,IAe/BC,GAAmBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,eAA/BD,EAb+B,SAACE,GAC5D,OACI,kBAAMC,SAAUD,EAAME,aAAtB,WACI,0BACI,SAAC,IAAD,CAAOC,KAAM,UAAWC,UAAWC,EAAAA,GAAUC,KAAK,OAAOC,YAAa,WAAYC,SAAU,CAACC,EAAAA,GAAcd,QAE/G,0BACI,6CAIf,G,8ICrBD,EAA0B,yBCA1B,EAA8B,iCAA9B,EAA+E,mCAA/E,EAAgI,iC,4BCEnHe,EAAyB,SAACV,GAEnC,OAAgCW,EAAAA,EAAAA,WAAkB,GAAlD,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAAiBX,EAAMc,QAAnD,eAAOA,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACFD,EAAUf,EAAMc,OACvB,GAAC,CAACd,EAAMc,SAeT,OACI,yBACKF,GACK,0BACE,kBAAOK,SARK,SAACC,GACzBH,EAAUG,EAAEC,cAAcC,MAC7B,EAMqDC,WAAS,EAACC,OAbrC,WACvBT,GAAY,GACZb,EAAMuB,aAAaT,EACtB,EAU2FR,KAAK,OAC1Ec,MAAON,OAEhB,0BACE,iBAAMU,cArBG,WACrBX,GAAY,EACf,EAmBe,SAAwCC,GAAU,iBAKrE,EC/BYW,EAAc,SAACzB,GAExB,OAAIA,EAAM0B,SAIF,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,KAKhB,iBAAKD,UAAWC,EAAhB,WACI,gBAAKC,IAAK7B,EAAM0B,QAAQI,OAAQ9B,EAAM0B,QAAQI,OAAOC,MAAQ,GAAIC,IAAI,iBACrE,SAACtB,EAAD,CAAwBI,OAAQd,EAAMc,OAAQS,aAAcvB,EAAMuB,sBAXvE,SAACU,EAAA,EAAD,GAmBd,EC5BD,EAAwB,uBCAxB,EAAuB,mBCQVC,EAA2B,SAAClC,GACrC,OACI,iBAAK2B,UAAWC,EAAhB,WACI,gBAAKC,IAAI,kEAAkEG,IAAI,MAC/E,0BAAOhC,EAAMmC,WACb,qCAAanC,EAAMoC,WAG9B,E,8BCAYC,EAAUC,EAAAA,MAAW,WAE9BC,QAAQC,IAAI,KAEZ,IAAMC,GAAWC,EAAAA,EAAAA,MAGbC,GAFgBC,EAAAA,EAAAA,KAA2C,SAAAC,GAAK,OAAIA,EAAMC,eAAeC,WAAzB,IAEpCC,KAAI,SAAAC,GAAI,OAAI,SAACf,EAAD,CAAoBgB,GAAID,EAAKC,GACjBf,QAASc,EAAKd,QACdC,MAAOa,EAAKb,OAFba,EAAKC,GAApB,IAYxC,OACI,iBAAKvB,UAAWC,EAAhB,WACI,sCACA,0BAOI,SAAC,IAAD,CAAkB3B,SAhBd,SAACkD,GAEbV,GAASW,EAAAA,EAAAA,IAAqBD,EAAOE,UACrCF,EAAOE,QAAU,EACpB,OAcO,yBACKV,MAIhB,IC3CYW,EAAU,SAACtD,GAQpB,OACI,iBAAK2B,UAAWC,EAAhB,WACI,SAACH,EAAD,CAAa8B,OAAQvD,EAAMuD,OAAQzC,OAAQd,EAAMc,OAAQY,QAAS1B,EAAM0B,QAASH,aAAcvB,EAAMuB,gBAGrG,SAACc,EAAD,MAGX,E,8BCOKmB,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAsBD,OAtBCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAEF,WACI,IAAIC,EAASC,KAAK1D,MAAM2D,MAAMC,OAAOH,OAChCA,IACDA,EAA+B,OAAtBC,KAAK1D,MAAMuD,OAAkBG,KAAK1D,MAAMuD,OAAOM,WAAa,KAEjEH,KAAK1D,MAAM8D,QAAQC,KAAK,UAGhCL,KAAK1D,MAAMgE,eAAeP,GAE1BC,KAAK1D,MAAMiE,cAAcR,EAG5B,uBAED,WACI,OACI,SAACH,GAAD,kBAAaI,KAAK1D,OAAlB,IAAyB0B,QAASgC,KAAK1D,MAAM0B,QAASZ,OAAQ4C,KAAK1D,MAAMc,OAChES,aAAcmC,KAAK1D,MAAMuB,eAEzC,OAtBCiC,CAA8BlB,EAAAA,WAoCvB4B,GAAsBC,EAAAA,EAAAA,KAC/BC,EAAAA,EAAAA,KAZkB,SAACvB,GACnB,MAAO,CACHnB,QAASmB,EAAMC,eAAepB,QAC9BZ,OAAQ+B,EAAMC,eAAehC,OAC7ByC,OAAQV,EAAMwB,YAAYZ,OAEjC,GAM4B,CACrBO,eAAgBM,EAAAA,GAChBL,cAAeM,EAAAA,GACfhD,aAAciD,EAAAA,KAElBC,EAAAA,GAAYC,EAAAA,EANmBP,CAOjCX,E","sources":["Components/Profile/MyPosts/NewPostForm/NewPostForm.tsx","Components/Profile/Profile.module.css","webpack://samurai-way/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?9a7c","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/MyPosts.module.css","webpack://samurai-way/./src/Components/Profile/MyPosts/Post/Post.module.css?a988","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"sourcesContent":["import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, requiredField} from '../../../../Utils/Validators/validators';\r\nimport {Textarea} from '../../../Common/FormsControls/FormsControls';\r\n\r\nexport type FormDataType = {\r\n    newPost: string\r\n}\r\n\r\nexport const maxLength10 = maxLengthCreator(10)\r\n\r\nconst NewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPost'} component={Textarea} type=\"text\" placeholder={'New post'} validate={[requiredField,maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const NewPostReduxForm = reduxForm<FormDataType>({form: 'newPostForm'})(NewPostForm)","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__5NpeN\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__-24vO\",\"content_image\":\"ProfileInfo_content_image__6Fymo\",\"description\":\"ProfileInfo_description__6yZFt\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {ProfileStatusPropsType} from './ProfileStatus';\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(()=> {\r\n            setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <div>\r\n                    <input onChange={changeStatusHandler} autoFocus onBlur={deactivateEditMode} type=\"text\"\r\n                           value={status}/>\r\n                </div>\r\n                : <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || 'No status'}</span>\r\n                </div>}\r\n\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport styles from './ProfileInfo.module.css';\r\nimport {Preloader} from '../../Common/Preloader/Preloader';\r\nimport {ProfileStatus} from './ProfileStatus/ProfileStatus';\r\nimport {ProfilePropsType} from '../Profile';\r\nimport {ProfileStatusWithHooks} from './ProfileStatus/ProfileStatusWithHooks';\r\n\r\nexport const ProfileInfo = (props: ProfilePropsType) => {\r\n\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    } else {\r\n        return (\r\n            <div className={styles.profileInfo}>\r\n                <div className={styles.content_image}>\r\n                    {/*<img\r\n                        src=\"https://proprikol.ru/wp-content/uploads/2020/06/krasivye-kartinki-zakaty-27.jpg\"\r\n                        alt=\"Random from Internet\"/>*/}\r\n                </div>\r\n                <div className={styles.description}>\r\n                    <img src={props.profile.photos? props.profile.photos.small : ''} alt=\"Profile ava\"/>\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__3MT21\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__RM2QY\"};","import React from 'react';\r\nimport styles from './Post.module.css'\r\n\r\nexport type PostType = {\r\n    id: string;\r\n    message: string;\r\n    likes: number;\r\n}\r\n\r\nexport const Post: React.FC<PostType> = (props) => { //same as props:PostType\r\n    return (\r\n        <div className={styles.post}>\r\n            <img src=\"https://live.staticflickr.com/7572/26312703593_c983190d6c_b.jpg\" alt=\"\"/>\r\n            <span>{props.message}</span>\r\n            <div>Likes: {props.likes}</div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport styles from './MyPosts.module.css'\r\nimport {Post, PostType} from './Post/Post';\r\nimport {FormDataType, NewPostReduxForm} from './NewPostForm/NewPostForm';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../../Redux/ReduxStore';\r\nimport {addPostActionCreator} from '../../../Redux/Reducers/ProfileReducer';\r\n\r\n\r\nexport type MyPostsDataType = {\r\n    //profilePage: ProfilePagePropsType\r\n    myPostsData: Array<PostType>\r\n    newPostText: string\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport const MyPosts = React.memo(() => {\r\n\r\n    console.log('1')\r\n\r\n    const dispatch = useDispatch()\r\n    const myPostsData = useSelector<RootStateType,Array<PostType>>(state => state.profileReducer.myPostsData)\r\n\r\n    let postsElements = myPostsData.map(item => <Post key={item.id} id={item.id}\r\n                                                            message={item.message}\r\n                                                            likes={item.likes}/>)\r\n\r\n    /*let newPostElement = React.createRef<HTMLTextAreaElement>();*/\r\n\r\n    const addPost = (values: FormDataType) => {\r\n        /*props.addPost(values.newPost)*/\r\n        dispatch(addPostActionCreator(values.newPost))\r\n        values.newPost = ''\r\n    }\r\n\r\n    return (\r\n        <div className={styles.posts}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                {/*<div><textarea onChange={onTextAreaChangeHandler} ref={newPostElement}\r\n                               value={props.newPostText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>*/}\r\n                <NewPostReduxForm onSubmit={addPost}/>\r\n            </div>\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport styles from './Profile.module.css';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {MapStateToPropsType} from './ProfileContainer';\r\nimport {MyPosts} from './MyPosts/MyPosts';\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & { updateStatus: (status: string) => void }\r\n\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n\r\n    /*let myPostsData: Array<PostType> = [\r\n        {id: v1(), message: 'Hi, how are you?', likes: 22},\r\n        {id: v1(), message: 'Very nice!', likes: 10},\r\n        {id: v1(), message: 'It is my first post', likes: 15}\r\n    ]*/\r\n\r\n    return (\r\n        <div className={styles.profile}>\r\n            <ProfileInfo authed={props.authed} status={props.status} profile={props.profile} updateStatus={props.updateStatus}/>\r\n            {/*<MyPostsContainer //profilePage={props.profilePage} dispatch={props.dispatch}\r\n            />*/}\r\n            <MyPosts/>\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {compose} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getStatusThunkCreator,\r\n    getUserProfileThunkCreator,\r\n    ProfileFromServerPropsType, updateStatusThunkCreator\r\n} from '../../Redux/Reducers/ProfileReducer';\r\nimport {AppPropsType} from '../../Redux/ReduxStore';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect';\r\n\r\ntype PathParamType = {\r\n    userID: string\r\n}\r\n\r\nexport type MapStateToPropsType = {\r\n    profile: ProfileFromServerPropsType | null\r\n    status: string\r\n    authed: number | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userID: string) => void\r\n    getUserStatus: (userID: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nexport type ProfileContainerPropsType = OwnPropsType & RouteComponentProps<PathParamType>\r\n\r\nclass ProfileClassContainer extends React.Component<ProfileContainerPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        let userID = this.props.match.params.userID\r\n        if (!userID) {\r\n            userID = this.props.authed !== null ? this.props.authed.toString() : ''\r\n            if(!userID){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userID)\r\n        //setTimeout(()=>{\r\n        this.props.getUserStatus(userID)\r\n        // },500)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppPropsType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profileReducer.profile,\r\n        status: state.profileReducer.status,\r\n        authed: state.authReducer.userID\r\n    }\r\n}\r\n\r\n//let AuthRedirectComponent = withAuthRedirect(ProfileClassContainer)\r\n//let withUrlDataContainerComponent = withRouter(ProfileClassContainer)\r\n\r\nexport const ProfileContainerAPI = compose<React.FC>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileThunkCreator,\r\n        getUserStatus: getStatusThunkCreator,\r\n        updateStatus: updateStatusThunkCreator\r\n    }),\r\n    withRouter, withAuthRedirect\r\n)(ProfileClassContainer)\r\n"],"names":["maxLength10","maxLengthCreator","NewPostReduxForm","reduxForm","form","props","onSubmit","handleSubmit","name","component","Textarea","type","placeholder","validate","requiredField","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileInfo","profile","className","styles","src","photos","small","alt","Preloader","Post","message","likes","MyPosts","React","console","log","dispatch","useDispatch","postsElements","useSelector","state","profileReducer","myPostsData","map","item","id","values","addPostActionCreator","newPost","Profile","authed","ProfileClassContainer","userID","this","match","params","toString","history","push","getUserProfile","getUserStatus","ProfileContainerAPI","compose","connect","authReducer","getUserProfileThunkCreator","getStatusThunkCreator","updateStatusThunkCreator","withRouter","withAuthRedirect"],"sourceRoot":""}