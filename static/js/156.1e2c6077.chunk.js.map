{"version":3,"file":"static/js/156.1e2c6077.chunk.js","mappings":"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","sources":["Components/Common/FormsControls/FormsControls.tsx","webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?69ad","webpack://samurai-way/./src/Components/Dialogs/DialogItem/DialogItem.module.css?da38","Components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/Components/Dialogs/MessageItem/MessageItem.module.css?0fda","Components/Dialogs/MessageItem/MessageItem.tsx","Components/Dialogs/NewMessageForm/NewMessageForm.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Dialogs/Dialogs.tsx","Components/Profile/MyPosts/NewPostForm/NewPostForm.tsx","HOC/withAuthRedirect.tsx","Utils/Validators/validators.ts","webpack://samurai-way/./src/Components/Common/FormsControls/FormsControls.module.css?fdb6"],"sourcesContent":["import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {Field} from 'redux-form';\r\n\r\nconst FormControl = ({input, meta:{touched, error},children, ...restProps}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError && styles.error}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {child, input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {child, input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string,type: string, component: {(props: any): JSX.Element}, validators: any[], text?:string) => (\r\n    <div>\r\n        <Field name={name} component={component} type={type} placeholder={placeholder} validate={validators}/>{text}\r\n    </div>\r\n)\r\n\r\n/*export const Textarea = ({input,meta,...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={`${styles.formControl} ${hasError && styles.error}`}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}*/\r\n\r\n/*\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError && styles.error}`}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}*/\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__L3DLA\",\"messages\":\"Dialogs_messages__Lruyf\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogItems\":\"DialogItem_dialogItems__XzqoH\",\"active\":\"DialogItem_active__2ssv4\",\"dialog\":\"DialogItem_dialog__Xc0-v\"};","import React from 'react';\r\nimport styles from './DialogItem.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type DialogItemType = {\r\n    img: string;\r\n    name: string;\r\n    id: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    return (\r\n        <div className={styles.dialog} key={props.id}>\r\n            <img src={props.img} alt=\"\"/>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MessageItem_container__xanYE\",\"message\":\"MessageItem_message__Oknoe\"};","import React from 'react';\r\nimport styles from './MessageItem.module.css';\r\n\r\nexport type MessageItemType = {\r\n    id: string;\r\n    message: string;\r\n    img: string\r\n}\r\n\r\nexport const MessageItem = (props: MessageItemType) => {\r\n    return (<div className={styles.container}>\r\n            <img src={props.img} alt=\"\"/>\r\n            <div className={styles.message} key={props.id}>{props.message}</div>\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../Common/FormsControls/FormsControls';\r\nimport {requiredField} from '../../../Utils/Validators/validators';\r\nimport {maxLength10} from '../../Profile/MyPosts/NewPostForm/NewPostForm';\r\n\r\nexport type FormDataType = {\r\n    newMessage: string\r\n}\r\n\r\nconst NewMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newMessage'} component={Textarea} type=\"text\" placeholder={'New message'} validate={[requiredField,maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const NewMessageReduxForm = reduxForm<FormDataType>({form: 'newMessageForm'})(NewMessageForm)","import React from 'react';\r\nimport {addMessageActionCreator} from '../../Redux/Reducers/DialogsReducer';\r\nimport {Dialogs, DialogsPropsType} from './Dialogs';\r\n//import {StoreContext} from '../../StoreContext';\r\nimport {AppPropsType} from '../../Redux/ReduxStore';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect';\r\n\r\n\r\nexport type DialogsContainerDataType = DialogsPropsType & MapDispatchPropsType\r\n\r\n/*export const DialogsContainer = (/!*props: DialogsContainerDataType*!/) => {\r\n\r\n    /!*const onTextAreaChangeHandler = (text: string) => {\r\n        props.dispatch(updateNewMessageTextActionCreator(text))\r\n    }\r\n\r\n    const addMessage = () => {\r\n        props.dispatch(addMessageActionCreator())\r\n    }*!/\r\n\r\n    return (\r\n       /!* <StoreContext.Consumer>\r\n            {(store: ReduxStoreType) => {\r\n\r\n                const dialogs = store.getState().dialogsReducer\r\n\r\n                const onTextAreaChangeHandler = (text: string) => {\r\n                    store.dispatch(updateNewMessageTextActionCreator(text))\r\n                }\r\n\r\n                const addMessage = () => {\r\n                    store.dispatch(addMessageActionCreator())\r\n                }\r\n                return (\r\n                    <Dialogs //dialogsPageData={store.getState().dialogsPageData}\r\n                        dialogsData={dialogs.dialogsData}\r\n                        messagesData={dialogs.messagesData}\r\n                        newMessageText={dialogs.newMessageText}\r\n                        addMessage={addMessage}\r\n                        updateTextAreaValue={onTextAreaChangeHandler}\r\n                    />)\r\n            }\r\n            }\r\n        </StoreContext.Consumer>*!/\r\n        <></>\r\n    )\r\n};*/\r\n\r\ntype MapDispatchPropsType = {\r\n    // addMessage: () => void\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppPropsType): DialogsPropsType => {\r\n    return {\r\n        dialogsData: state.dialogsReducer.dialogsData,\r\n        messagesData: state.dialogsReducer.messagesData,\r\n        //isAuth: state.authReducer.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        /*addMessage: () => {\r\n            dispatch(addMessageActionCreator())\r\n        },*/\r\n        addMessage: (newMessage: string) => {\r\n            dispatch(addMessageActionCreator(newMessage))\r\n        }\r\n    }\r\n}\r\n\r\n//export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n//export default compose<React.FC>(connect(mapStateToProps, mapDispatchToProps))(Dialogs);\r\nexport const DialogsContainer = compose<React.FC>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)","import React from 'react';\r\nimport styles from './Dialogs.module.css';\r\nimport {DialogItem, DialogItemType} from './DialogItem/DialogItem';\r\nimport {MessageItem, MessageItemType} from './MessageItem/MessageItem';\r\nimport {DialogsContainerDataType} from './DialogsContainer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {store} from '../../Redux/ReduxStore';\r\nimport {FormDataType, NewMessageReduxForm} from './NewMessageForm/NewMessageForm';\r\n\r\n/*export type DialogsPageDataType = {\r\n    //dialogsPageData: DialogsPropsType\r\n    dialogsData: Array<DialogItemType>\r\n    messagesData: Array<MessageItemType>\r\n    newMessageText: string\r\n    addMessage: () => void\r\n    updateTextAreaValue: (text: string) => void\r\n}*/\r\n\r\nexport type DialogsPropsType = {\r\n    dialogsData: Array<DialogItemType>,\r\n    messagesData: Array<MessageItemType>,\r\n}\r\n\r\nexport const Dialogs = (props: DialogsContainerDataType) => {\r\n\r\n    /* const onTextAreaChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n         let text = (e.currentTarget.value)\r\n         props.updateTextAreaValue(text)\r\n     }*/\r\n\r\n    /*const addMessage = () => {\r\n        props.addMessage()\r\n    }*/\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        props.addMessage(values.newMessage)\r\n        values.newMessage = ''\r\n    }\r\n\r\n    let state = store.getState()\r\n\r\n    if (!state.authReducer.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogItems}>\r\n                {props.dialogsData.map(item => <DialogItem key={item.id} img={item.img} name={item.name}\r\n                                                           id={item.id}/>)}\r\n                {/*<DialogItem name=\"Vasya\" id={1}/>*/}\r\n                {/*<DialogItem name=\"Kate\" id={2}/>*/}\r\n                {/*<DialogItem name=\"Leonid\" id={3}/>*/}\r\n                {/*<DialogItem name=\"Alex\" id={4}/>*/}\r\n            </div>\r\n            <div className={styles.messages}>\r\n\r\n                <div>\r\n                    {props.messagesData.map(item => <MessageItem key={item.id} img={item.img}\r\n                                                                 id={item.id}\r\n                                                                 message={item.message}/>)}\r\n                </div>\r\n\r\n                <div>\r\n                    {/*<textarea value={props.newMessageText}\r\n                              onChange={onTextAreaChangeHandler}/>\r\n                    <div>\r\n                        <button onClick={addMessage}>Add message</button>\r\n                    </div>*/}\r\n                    <NewMessageReduxForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, requiredField} from '../../../../Utils/Validators/validators';\r\nimport {Textarea} from '../../../Common/FormsControls/FormsControls';\r\n\r\nexport type FormDataType = {\r\n    newPost: string\r\n}\r\n\r\nexport const maxLength10 = maxLengthCreator(10)\r\n\r\nconst NewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPost'} component={Textarea} type=\"text\" placeholder={'New post'} validate={[requiredField,maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const NewPostReduxForm = reduxForm<FormDataType>({form: 'newPostForm'})(NewPostForm)","import React from 'react';\r\nimport {AppPropsType, store} from '../Redux/ReduxStore';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nexport type MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppPropsType): MapStateToPropsForRedirectType => {\r\n    return {\r\n        isAuth: state.authReducer.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: React.FC<T>){\r\n    const RedirectComponent = (props: MapStateToPropsForRedirectType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n/*export function withAuthRedirect(Component: any) {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            let state = store.getState()\r\n            if (!state.authReducer.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}*/\r\n\r\n","export const requiredField = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required.'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) {\r\n        return `Max length of the field is ${maxLength} symbols.`\r\n    }\r\n    return undefined\r\n}\r\n\r\nexport const maxLength140 = (value: string) => {\r\n    if (value && value.length > 140) {\r\n        return 'Max length of the field is 140 symbols.'\r\n    }\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__Y75OI\",\"error\":\"FormsControls_error__TB8HK\",\"formSummaryError\":\"FormsControls_formSummaryError__rJYd+\"};"],"names":["FormControl","input","meta","touched","error","children","hasError","className","styles","Textarea","props","child","restProps","Input","createField","placeholder","name","type","component","validators","text","validate","DialogItem","src","img","alt","to","id","MessageItem","message","NewMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","requiredField","maxLength10","DialogsContainer","compose","connect","state","dialogsData","dialogsReducer","messagesData","dispatch","addMessage","newMessage","addMessageActionCreator","withAuthRedirect","store","authReducer","isAuth","map","item","values","maxLengthCreator","NewPostReduxForm","mapStateToPropsForRedirect","Component","value","maxLength","length"],"sourceRoot":""}