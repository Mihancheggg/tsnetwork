{"version":3,"file":"static/js/934.70d36d17.chunk.js","mappings":"mVAIMA,EAAc,SAAC,GAA+D,EAA9DC,MAA+D,IAAD,IAAvDC,KAAMC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,SACzCC,IAD0E,YAC/DH,GAAWC,GAC5B,OACI,iBAAKG,UAAS,UAAKC,EAAAA,EAAAA,YAAL,YAA2BF,GAAYE,EAAAA,EAAAA,OAArD,WACI,yBACKH,IAEJC,IAAY,0BAAOF,MAG/B,EAEYK,EAAW,SAACC,GACsBA,EAApCC,MAAP,IAAcV,EAA6BS,EAA7BT,MAAgBW,GAAaF,EAAtBR,MAArB,OAA2CQ,EAA3C,IACA,OACI,SAACV,GAAD,kBAAiBU,GAAjB,cACI,uCAAcT,GAAWW,MAGpC,EAEYC,EAAQ,SAACH,GACyBA,EAApCC,MAAP,IAAcV,EAA6BS,EAA7BT,MAAgBW,GAAaF,EAAtBR,MAArB,OAA2CQ,EAA3C,IACA,OACI,SAACV,GAAD,kBAAiBU,GAAjB,cACI,oCAAWT,GAAWW,MAGjC,EAEYE,EAAc,SAACC,EAA4BC,EAAaC,EAAcC,EAAwCC,EAAmBC,GAAnH,OACvB,4BACI,SAAC,IAAD,CAAOJ,KAAMA,EAAME,UAAWA,EAAWD,KAAMA,EAAMF,YAAaA,EAAaM,SAAUF,IAAcC,IAFpF,C,sICRdE,GAAiBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,SAA/BD,EAd+B,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcrB,EAAW,EAAXA,MACzE,OACI,kBAAMsB,SAAUD,EAAhB,WACKX,EAAAA,EAAAA,IAAY,QAAS,QAAS,OAAQD,EAAAA,GAAO,CAACc,EAAAA,MAC9Cb,EAAAA,EAAAA,IAAY,WAAY,WAAY,WAAYD,EAAAA,GAAO,CAACc,EAAAA,MACxDb,EAAAA,EAAAA,IAAY,KAAM,aAAc,WAAYD,EAAAA,GAAO,GAAG,eACtDT,IAAS,gBAAKG,UAAWC,EAAAA,EAAAA,iBAAhB,SAA0CJ,KACpD,0BACI,2CAIf,I,wCC6BYwB,GAAiBC,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,KAzB1B,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAME,YAAYD,OAC1BE,OAAQH,EAAME,YAAYC,OAC1BC,MAAOJ,EAAME,YAAYE,MACzBC,MAAOL,EAAME,YAAYG,MAEhC,GAkBwE,CAACC,kBAAAA,EAAAA,GAAmBC,mBAAAA,EAAAA,KAA/DT,EA3ChB,SAACnB,GAMX,OAAIA,EAAMsB,QACC,SAAC,KAAD,CAAUO,GAAI,cAIrB,4BACI,mCACA,SAACjB,EAAD,CAAgBI,SAXP,SAACc,GACd9B,EAAM2B,kBAAkBG,EAASL,MAAOK,EAASC,SAAUD,EAASE,WACvE,MAYJ,G,+EC1BM,IAAMf,EAAgB,SAACgB,GAC1B,IAAIA,EAGJ,MAAO,oBACV,EAEYC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,GAASA,EAAMG,OAASD,EACxB,MAAM,8BAAN,OAAqCA,EAArC,YAGP,CAL+B,C,qBCNhC,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wC","sources":["Components/Common/FormsControls/FormsControls.tsx","Components/Login/LoginForm/LoginForm.tsx","Components/Login/Login.tsx","Utils/Validators/validators.ts","webpack://samurai-way/./src/Components/Common/FormsControls/FormsControls.module.css?fdb6"],"sourcesContent":["import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {Field} from 'redux-form';\r\n\r\nconst FormControl = ({input, meta:{touched, error},children, ...restProps}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError && styles.error}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {child, input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {child, input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string,type: string, component: {(props: any): JSX.Element}, validators: any[], text?:string) => (\r\n    <div>\r\n        <Field name={name} component={component} type={type} placeholder={placeholder} validate={validators}/>{text}\r\n    </div>\r\n)\r\n\r\n/*export const Textarea = ({input,meta,...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={`${styles.formControl} ${hasError && styles.error}`}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}*/\r\n\r\n/*\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError && styles.error}`}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}*/\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Input} from '../../Common/FormsControls/FormsControls';\r\nimport {requiredField} from '../../../Utils/Validators/validators';\r\nimport styles from './../../Common/FormsControls/FormsControls.module.css'\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', 'text', Input, [requiredField])}\r\n            {createField('Password', 'password', 'password', Input, [requiredField])}\r\n            {createField(null, 'rememberMe', 'checkbox', Input, [],'Remember me')}\r\n            {error && <div className={styles.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <button>Log in</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType>({form: 'Login'})(LoginForm)","import React from 'react';\r\nimport {FormDataType, LoginReduxForm} from './LoginForm/LoginForm';\r\nimport {compose} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {AuthStateType, loginThunkCreator, logoutThunkCreator} from '../../Redux/Reducers/AuthReducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppPropsType} from '../../Redux/ReduxStore';\r\n\r\ntype LoginPropsType = MapDispatchPropsType & AuthStateType\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n\r\n    const onSubmit = (FormData: FormDataType) => {\r\n        props.loginThunkCreator(FormData.email, FormData.password, FormData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nlet mapStateToProps = (state: AppPropsType): AuthStateType => {\r\n    return {\r\n        isAuth: state.authReducer.isAuth,\r\n        userID: state.authReducer.userID,\r\n        email: state.authReducer.email,\r\n        login: state.authReducer.login\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    loginThunkCreator: (email: string, password: string, rememberMe: boolean) => void,\r\n    logoutThunkCreator: () => void,\r\n}\r\n\r\n/*let mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        login: (email: string, password: string, rememberMe: boolean) => {\r\n            dispatch(loginThunkCreator(email, password, rememberMe))\r\n        },\r\n        logout: ()=> {\r\n            dispatch(logoutThunkCreator())\r\n        }\r\n    }\r\n}*/\r\n\r\nexport const LoginContainer = compose<React.FC>(connect(mapStateToProps, {loginThunkCreator, logoutThunkCreator}))(Login)","export const requiredField = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required.'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) {\r\n        return `Max length of the field is ${maxLength} symbols.`\r\n    }\r\n    return undefined\r\n}\r\n\r\nexport const maxLength140 = (value: string) => {\r\n    if (value && value.length > 140) {\r\n        return 'Max length of the field is 140 symbols.'\r\n    }\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__Y75OI\",\"error\":\"FormsControls_error__TB8HK\",\"formSummaryError\":\"FormsControls_formSummaryError__rJYd+\"};"],"names":["FormControl","input","meta","touched","error","children","hasError","className","styles","Textarea","props","child","restProps","Input","createField","placeholder","name","type","component","validators","text","validate","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","requiredField","LoginContainer","compose","connect","state","isAuth","authReducer","userID","email","login","loginThunkCreator","logoutThunkCreator","to","FormData","password","rememberMe","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}