{"version":3,"file":"static/js/156.f35e7bbd.chunk.js","mappings":"mLACA,G,QAAA,CAAgB,QAAU,yBAAyB,SAAW,4BCA9D,EAA2G,2B,mBCS9FA,EAAa,SAACC,GACvB,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKC,IAAKH,EAAMI,IAAKC,IAAI,MACzB,SAAC,KAAD,CAASC,GAAI,YAAcN,EAAMO,GAAjC,SAAsCP,EAAMQ,SAFZR,EAAMO,GAKjD,EChBD,EAA4B,+BAA5B,EAAqE,6BCQxDE,EAAc,SAACT,GACxB,OAAQ,iBAAKC,UAAWC,EAAhB,WACA,gBAAKC,IAAKH,EAAMI,IAAKC,IAAI,MACzB,gBAAKJ,UAAWC,EAAhB,SAAgDF,EAAMU,SAAjBV,EAAMO,MAItD,E,oECOYI,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,kBAA/BD,EAb+B,SAACZ,GAC/D,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOR,KAAM,aAAcS,UAAWC,EAAAA,GAAUC,KAAK,OAAOC,YAAa,cAAeC,SAAU,CAACC,EAAAA,GAAcC,EAAAA,QAErH,0BACI,gDAIf,I,8BCuDYC,GAAmBC,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,KArB5B,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAME,eAAeD,YAClCE,aAAcH,EAAME,eAAeC,aAG1C,IAEwB,SAACC,GACtB,MAAO,CAIHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,GAAwBD,GACpC,EAER,IAI+FE,EAAAA,EAAhEV,ECrDT,SAACzB,GAkBpB,OAFYoC,EAAAA,EAAAA,WAEDC,YAAYC,QAGnB,iBAAKrC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,YAAhB,SACKF,EAAM4B,YAAYW,KAAI,SAAAC,GAAI,OAAI,SAACzC,EAAD,CAA0BK,IAAKoC,EAAKpC,IAAKI,KAAMgC,EAAKhC,KACxCD,GAAIiC,EAAKjC,IADJiC,EAAKjC,GAA1B,OAO/B,iBAAKN,UAAWC,EAAAA,SAAhB,WAEI,yBACKF,EAAM8B,aAAaS,KAAI,SAAAC,GAAI,OAAI,SAAC/B,EAAD,CAA2BL,IAAKoC,EAAKpC,IACxBG,GAAIiC,EAAKjC,GACTG,QAAS8B,EAAK9B,SAFT8B,EAAKjC,GAA3B,OAKhC,0BAMI,SAACI,EAAD,CAAqBG,SAjCf,SAAC2B,GACnBzC,EAAMgC,WAAWS,EAAOR,YACxBQ,EAAOR,WAAa,EACvB,aAIqC,SAAC,KAAD,CAAU3B,GAAI,UA+BvD,G,yIC/DYiB,GAAcmB,EAAAA,EAAAA,IAAiB,IAe/BC,GAAmB/B,EAAAA,EAAAA,GAAwB,CAACC,KAAM,eAA/BD,EAb+B,SAACZ,GAC5D,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAAC,IAAD,CAAOP,KAAM,UAAWS,UAAWC,EAAAA,GAAUC,KAAK,OAAOC,YAAa,WAAYC,SAAU,CAACC,EAAAA,GAAcC,QAE/G,0BACI,6CAIf,G","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?69ad","webpack://samurai-way/./src/Components/Dialogs/DialogItem/DialogItem.module.css?da38","Components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/Components/Dialogs/MessageItem/MessageItem.module.css?0fda","Components/Dialogs/MessageItem/MessageItem.tsx","Components/Dialogs/NewMessageForm/NewMessageForm.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Dialogs/Dialogs.tsx","Components/Profile/MyPosts/NewPostForm/NewPostForm.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__L3DLA\",\"messages\":\"Dialogs_messages__Lruyf\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogItems\":\"DialogItem_dialogItems__XzqoH\",\"active\":\"DialogItem_active__2ssv4\",\"dialog\":\"DialogItem_dialog__Xc0-v\"};","import React from 'react';\r\nimport styles from './DialogItem.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type DialogItemType = {\r\n    img: string;\r\n    name: string;\r\n    id: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    return (\r\n        <div className={styles.dialog} key={props.id}>\r\n            <img src={props.img} alt=\"\"/>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MessageItem_container__xanYE\",\"message\":\"MessageItem_message__Oknoe\"};","import React from 'react';\r\nimport styles from './MessageItem.module.css';\r\n\r\nexport type MessageItemType = {\r\n    id: string;\r\n    message: string;\r\n    img: string\r\n}\r\n\r\nexport const MessageItem = (props: MessageItemType) => {\r\n    return (<div className={styles.container}>\r\n            <img src={props.img} alt=\"\"/>\r\n            <div className={styles.message} key={props.id}>{props.message}</div>\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../Common/FormsControls/FormsControls';\r\nimport {requiredField} from '../../../Utils/Validators/validators';\r\nimport {maxLength10} from '../../Profile/MyPosts/NewPostForm/NewPostForm';\r\n\r\nexport type FormDataType = {\r\n    newMessage: string\r\n}\r\n\r\nconst NewMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newMessage'} component={Textarea} type=\"text\" placeholder={'New message'} validate={[requiredField,maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const NewMessageReduxForm = reduxForm<FormDataType>({form: 'newMessageForm'})(NewMessageForm)","import React from 'react';\r\nimport {addMessageActionCreator} from '../../Redux/Reducers/DialogsReducer';\r\nimport {Dialogs, DialogsPropsType} from './Dialogs';\r\n//import {StoreContext} from '../../StoreContext';\r\nimport {AppPropsType} from '../../Redux/ReduxStore';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect';\r\n\r\n\r\nexport type DialogsContainerDataType = DialogsPropsType & MapDispatchPropsType\r\n\r\n/*export const DialogsContainer = (/!*props: DialogsContainerDataType*!/) => {\r\n\r\n    /!*const onTextAreaChangeHandler = (text: string) => {\r\n        props.dispatch(updateNewMessageTextActionCreator(text))\r\n    }\r\n\r\n    const addMessage = () => {\r\n        props.dispatch(addMessageActionCreator())\r\n    }*!/\r\n\r\n    return (\r\n       /!* <StoreContext.Consumer>\r\n            {(store: ReduxStoreType) => {\r\n\r\n                const dialogs = store.getState().dialogsReducer\r\n\r\n                const onTextAreaChangeHandler = (text: string) => {\r\n                    store.dispatch(updateNewMessageTextActionCreator(text))\r\n                }\r\n\r\n                const addMessage = () => {\r\n                    store.dispatch(addMessageActionCreator())\r\n                }\r\n                return (\r\n                    <Dialogs //dialogsPageData={store.getState().dialogsPageData}\r\n                        dialogsData={dialogs.dialogsData}\r\n                        messagesData={dialogs.messagesData}\r\n                        newMessageText={dialogs.newMessageText}\r\n                        addMessage={addMessage}\r\n                        updateTextAreaValue={onTextAreaChangeHandler}\r\n                    />)\r\n            }\r\n            }\r\n        </StoreContext.Consumer>*!/\r\n        <></>\r\n    )\r\n};*/\r\n\r\ntype MapDispatchPropsType = {\r\n    // addMessage: () => void\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppPropsType): DialogsPropsType => {\r\n    return {\r\n        dialogsData: state.dialogsReducer.dialogsData,\r\n        messagesData: state.dialogsReducer.messagesData,\r\n        //isAuth: state.authReducer.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        /*addMessage: () => {\r\n            dispatch(addMessageActionCreator())\r\n        },*/\r\n        addMessage: (newMessage: string) => {\r\n            dispatch(addMessageActionCreator(newMessage))\r\n        }\r\n    }\r\n}\r\n\r\n//export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n//export default compose<React.FC>(connect(mapStateToProps, mapDispatchToProps))(Dialogs);\r\nexport const DialogsContainer = compose<React.FC>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)","import React from 'react';\r\nimport styles from './Dialogs.module.css';\r\nimport {DialogItem, DialogItemType} from './DialogItem/DialogItem';\r\nimport {MessageItem, MessageItemType} from './MessageItem/MessageItem';\r\nimport {DialogsContainerDataType} from './DialogsContainer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {store} from '../../Redux/ReduxStore';\r\nimport {FormDataType, NewMessageReduxForm} from './NewMessageForm/NewMessageForm';\r\n\r\n/*export type DialogsPageDataType = {\r\n    //dialogsPageData: DialogsPropsType\r\n    dialogsData: Array<DialogItemType>\r\n    messagesData: Array<MessageItemType>\r\n    newMessageText: string\r\n    addMessage: () => void\r\n    updateTextAreaValue: (text: string) => void\r\n}*/\r\n\r\nexport type DialogsPropsType = {\r\n    dialogsData: Array<DialogItemType>,\r\n    messagesData: Array<MessageItemType>,\r\n}\r\n\r\nexport const Dialogs = (props: DialogsContainerDataType) => {\r\n\r\n    /* const onTextAreaChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n         let text = (e.currentTarget.value)\r\n         props.updateTextAreaValue(text)\r\n     }*/\r\n\r\n    /*const addMessage = () => {\r\n        props.addMessage()\r\n    }*/\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        props.addMessage(values.newMessage)\r\n        values.newMessage = ''\r\n    }\r\n\r\n    let state = store.getState()\r\n\r\n    if (!state.authReducer.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogItems}>\r\n                {props.dialogsData.map(item => <DialogItem key={item.id} img={item.img} name={item.name}\r\n                                                           id={item.id}/>)}\r\n                {/*<DialogItem name=\"Vasya\" id={1}/>*/}\r\n                {/*<DialogItem name=\"Kate\" id={2}/>*/}\r\n                {/*<DialogItem name=\"Leonid\" id={3}/>*/}\r\n                {/*<DialogItem name=\"Alex\" id={4}/>*/}\r\n            </div>\r\n            <div className={styles.messages}>\r\n\r\n                <div>\r\n                    {props.messagesData.map(item => <MessageItem key={item.id} img={item.img}\r\n                                                                 id={item.id}\r\n                                                                 message={item.message}/>)}\r\n                </div>\r\n\r\n                <div>\r\n                    {/*<textarea value={props.newMessageText}\r\n                              onChange={onTextAreaChangeHandler}/>\r\n                    <div>\r\n                        <button onClick={addMessage}>Add message</button>\r\n                    </div>*/}\r\n                    <NewMessageReduxForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, requiredField} from '../../../../Utils/Validators/validators';\r\nimport {Textarea} from '../../../Common/FormsControls/FormsControls';\r\n\r\nexport type FormDataType = {\r\n    newPost: string\r\n}\r\n\r\nexport const maxLength10 = maxLengthCreator(10)\r\n\r\nconst NewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPost'} component={Textarea} type=\"text\" placeholder={'New post'} validate={[requiredField,maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const NewPostReduxForm = reduxForm<FormDataType>({form: 'newPostForm'})(NewPostForm)"],"names":["DialogItem","props","className","styles","src","img","alt","to","id","name","MessageItem","message","NewMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","type","placeholder","validate","requiredField","maxLength10","DialogsContainer","compose","connect","state","dialogsData","dialogsReducer","messagesData","dispatch","addMessage","newMessage","addMessageActionCreator","withAuthRedirect","store","authReducer","isAuth","map","item","values","maxLengthCreator","NewPostReduxForm"],"sourceRoot":""}